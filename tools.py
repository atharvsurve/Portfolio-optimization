import yfinance as yf
import pandas as pd

# Tool 1: Fetch stock data
def fetch_stock_data(ticker: str, start_date: str = "2020-01-01", end_date: str = "2024-12-31") -> str:
    df = yf.download(ticker, start=start_date, end=end_date)
    df = df[['Adj Close']].rename(columns={'Adj Close': ticker})
    return df.to_csv()

# Tool 2: Equal-weight portfolio
def build_equal_weight_portfolio(tickers: list) -> dict:
    n = len(tickers)
    weights = {ticker: 1/n for ticker in tickers}
    return weights

# Tool 3: Optimize portfolio (min variance using cvxpy)
def optimize_portfolio(price_data_csvs: list) -> dict:
    import pandas as pd, numpy as np, cvxpy as cp
    from functools import reduce

    dfs = [pd.read_csv(pd.compat.StringIO(csv), index_col=0, parse_dates=True) for csv in price_data_csvs]
    df = reduce(lambda l, r: pd.merge(l, r, left_index=True, right_index=True), dfs)
    returns = df.pct_change().dropna()
    
    tickers = returns.columns.tolist()
    cov_matrix = returns.cov().values
    n = len(tickers)
    
    w = cp.Variable(n)
    prob = cp.Problem(cp.Minimize(cp.quad_form(w, cov_matrix)), [cp.sum(w) == 1, w >= 0])
    prob.solve()

    weights = {tickers[i]: float(w.value[i]) for i in range(n)}
    return weights

# Tool 4: Backtest
def backtest_portfolio(price_data_csvs: list, weights: dict) -> str:
    import pandas as pd
    from functools import reduce

    dfs = [pd.read_csv(pd.compat.StringIO(csv), index_col=0, parse_dates=True) for csv in price_data_csvs]
    df = reduce(lambda l, r: pd.merge(l, r, left_index=True, right_index=True), dfs)
    returns = df.pct_change().dropna()
    weighted_returns = sum(returns[col] * weights[col] for col in weights)
    portfolio = pd.DataFrame({'Portfolio': weighted_returns})
    return portfolio.to_csv()

# Tool 5: Metrics
def compute_portfolio_metrics(portfolio_csv: str) -> str:
    import pandas as pd, numpy as np
    df = pd.read_csv(pd.compat.StringIO(portfolio_csv), index_col=0, parse_dates=True)
    returns = df['Portfolio']
    sharpe = returns.mean() / returns.std() * np.sqrt(252)
    sortino = returns.mean() / returns[returns < 0].std() * np.sqrt(252)
    cumulative = (1 + returns).cumprod()
    max_drawdown = (cumulative.cummax() - cumulative).max()
    return f"Sharpe Ratio: {sharpe:.2f}, Sortino Ratio: {sortino:.2f}, Max Drawdown: {max_drawdown:.2%}"

# Tool 6: Markdown report
def format_markdown_report(metrics_summary: str, strategy: str, tickers: list) -> str:
    report = f"""
    ## ğŸ“Š Portfolio Report

    **Strategy**: {strategy}  
    **Assets**: {', '.join(tickers)}

    ### ğŸ§® Performance Metrics:
    {metrics_summary}

    ---

    _This summary was generated by your AI assistant._
    """
    return report
